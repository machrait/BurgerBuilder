{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","submitHandler","event","preventDefault","props","onAuth","inputChangedHandler","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispath","actions","withErrorHandler","axios","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.1c776b7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Input\":\"Auth_Input__2LQ-q\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from '../../axios-orders';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport { updateObject, checkValidity } from '../../shared/utility';\nclass Auth extends Component \n{\n\tstate = {\n\t\tcontrols: {\n\t\t\temail: \n\t\t\t{\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: \n\t\t\t\t{\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tplaceholder: 'E-mail address'\n\t\t\t\t},\n\t\t\t\tvalue: '',\n\t\t\t\tvalidation:\n\t\t\t\t{\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false\n\t\t\t},\n\t\t\tpassword: \n\t\t\t{\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: \n\t\t\t\t{\n\t\t\t\t\ttype: 'password',\n\t\t\t\t\tplaceholder: 'Password'\n\t\t\t\t},\n\t\t\t\tvalue: '',\n\t\t\t\tvalidation:\n\t\t\t\t{\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false\n\t\t\t},\n\t\t},\n\t\tisSignup: true\n\t\t\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tif(!this.props.buildingBurger && this.props.authRedirectPath !== '/')\n\t\t{\n\t\t\tthis.props.onSetAuthRedirectPath();\n\t\t}\n\t}\n\tsubmitHandler = (event) =>\n\t{\n\t\tevent.preventDefault();\n\t\tthis.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n\t}\n\n\tinputChangedHandler = (event, controlName) =>\n\t{\n\t\tconst updatedControls = updateObject(this.state.controls, {\n\t\t\t[controlName]: updateObject(this.state.controls[controlName], {\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n\t\t\t\ttouched: true\n\t\t\t})\n\t\t});\n\t\t\n\t\tthis.setState({controls: updatedControls});\n\t}\n\n\tswitchAuthModeHandler = () =>\n\t{\n\t\tthis.setState(prevState => \n\t\t{\n\t\t\treturn {isSignup: !prevState.isSignup};\n\t\t});\n\t}\n\n\trender() \n\t{\n\t\tconst formElementsArray =[];\n\t\tfor (let key in this.state.controls)\n\t\t{\n\t\t\tformElementsArray.push({\n\t\t\t\tid: key,\n\t\t\t\tconfig: this.state.controls[key]\n\t\t\t});\n\t\t}\n\t\tlet form = formElementsArray.map(formElement =>\n\t\t{\n\t\t\treturn (\n\t\t\t\t<Input \n\t\t\t\t\tkey={formElement.id}\n\t\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\t\tvalue={formElement.config.value}\n\t\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\t\tchanged={(event) => this.inputChangedHandler(event, formElement.id)}/>);\n\t\t\t\t\n\t\t});\n\t\tif (this.props.loading)\n\t\t{\n\t\t\tform = <Spinner/>;\n\t\t}\n\t\tlet errorMessage = null;\n\t\tif (this.props.error)\n\t\t{\n\t\t\terrorMessage = <p>{this.props.error.message}</p>;\n\t\t}\n\t\tlet authRedirect = null;\n\t\tif (this.props.isAuthenticated)\n\t\t{\n\t\t\tauthRedirect = <Redirect to={this.props.authRedirectPath}/>;\n\t\t}\n\t\treturn (\n\t\t\t<div className={classes.Auth}>\n\t\t\t\t{authRedirect}\n\t\t\t\t{errorMessage}\n\t\t\t\t<form onSubmit={(event) => this.submitHandler(event)}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType=\"Success\" >SUBMIT</Button>\n\t\t\t\t</form>\n\t\t\t\t<Button \n\t\t\t\t\tbtnType=\"Danger\"\n\t\t\t\t\tclicked={this.switchAuthModeHandler}\n\t\t\t\t\t>SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuthenticated: state.auth.token !== null,\n\t\tbuildingBurger: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath\n\t}\n}\nconst mapDispatchToProps = dispath => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) => dispath(actions.auth(email, password, isSignup)),\n\t\tonSetAuthRedirectPath: () => dispath(actions.setAuthRedirectPath('/'))\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Auth, axios));\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\n\nconst input = (props) => \n{\n\tlet inputElement = null;\n\tconst inputClasses = [classes.InputElement];\n\n\tif(props.invalid && props.shouldValidate && props.touched)\n\t{\n\t\tinputClasses.push(classes.Invalid);\n\t}\n\tswitch (props.elementType)\n\t{\n\t\tcase ('input'):\n\t\t\tinputElement = <input \n\t\t\t\t\t\t\tclassName={inputClasses.join(' ')} \n\t\t\t\t\t\t\t{...props.elementConfig} \n\t\t\t\t\t\t\tvalue={props.value}\n\t\t\t\t\t\t\tonChange={props.changed}/>;\n\t\t\tbreak;\n\t\tcase ('textarea'):\n\t\t\tinputElement = <textarea \n\t\t\t\t\t\t\tclassName={inputClasses.join(' ')} \n\t\t\t\t\t\t\t{...props.elementConfig} \n\t\t\t\t\t\t\tvalue={props.value}\n\t\t\t\t\t\t\tonChange={props.changed}/>;\n\t\t\tbreak;\n\t\tcase ('select'):\n\t\t\tinputElement = (\n\t\t\t\t\t\t<select \n\t\t\t\t\t\t\tclassName={inputClasses.join(' ')} \n\t\t\t\t\t\t\tvalue={props.value}\n\t\t\t\t\t\t\tonChange={props.changed}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprops.elementConfig.options.map(option =>\n\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t<option \n\t\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\t\tvalue={option.value}>\n\t\t\t\t\t\t\t\t\t\t\t{option.displayValue}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</select>);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tinputElement = <input \n\t\t\t\t\t\t\tclassName={inputClasses.join(' ')} \n\t\t\t\t\t\t\t{...props.elementConfig} \n\t\t\t\t\t\t\tvalue={props.value}\n\t\t\t\t\t\t\tonChange={props.changed}/>\n\t}\n\treturn (\n        <div className={classes.Input}>\n            <label className={classes.Label} >{props.label}</label>\n\t\t\t{inputElement}\n        </div>\n    );\n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}